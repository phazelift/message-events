const{isFunction:isFunction,isString:isString,forceArray:forceArray,forceFunction:forceFunction}=require("types.js"),APP_VERSION="0.3.0",ERROR="error",FORMAT="format",INFO="info",MAX_ID_LENGTH=48,MESSAGE_EVENTS="MessageEvents",OFF="off",ON="on",INTERNAL_METHOD_IDS=["constructor",OFF,ON,FORMAT];let message;const ERROR_INVALID_ARGUMENTS="invalid or missing argument(s)!",ERROR_INVALID_HANDLER="invalid or missing handler!",ERROR_INTERNAL_ID="internal method names are not allowed!",ERROR_INVALID_ID_LENGTH="invalid id length!",argumentIsString=(e,t)=>{if(isString(e))return!0;message.error(t,ERROR_INVALID_ARGUMENTS)},validIdLength=(e,t)=>{if(e.length>0&&e.length<=48)return!0;message.error(t,"invalid id length!")},noInternalId=(e,t)=>{if(INTERNAL_METHOD_IDS.indexOf(e)<0)return!0;message.error(t,ERROR_INTERNAL_ID)},validId=(e,t)=>{if(argumentIsString(e,t)&&validIdLength(e,t)&&noInternalId(e,t))return!0},validHandler=(e,t)=>{if(isFunction(e))return!0;message.error(t,ERROR_INVALID_HANDLER)},showInfoMessage=()=>{message.info({sender:MESSAGE_EVENTS,type:INFO,loaded:!0,version:"0.3.0"})};class MessageEvents{static get ERROR_INVALID_HANDLER(){return ERROR_INVALID_HANDLER}static get ERROR_INVALID_ARGUMENTS(){return ERROR_INVALID_ARGUMENTS}static get ERROR_INTERNAL_ID(){return ERROR_INTERNAL_ID}static get ERROR_INVALID_ID_LENGTH(){return"invalid id length!"}static on=(e,t)=>{message.on(e,t),e==INFO&&message.info({sender:MESSAGE_EVENTS,type:INFO,loaded:!0,version:"0.3.0"})};static off=e=>message.off(e);#formats={};format(e,t){if(validId(e,FORMAT)&&validHandler(t,FORMAT))if(this.#formats[e]=t,this.hasOwnProperty(e)){const t=this[e];this[e]=(...r)=>t(this.#formats[e](...forceArray(r)))}else this[e]=forceFunction();return this}off(e){if(null==e)for(const e in this)this[e]=forceFunction();else this.hasOwnProperty(e)&&noInternalId(e,OFF)&&(this[e]=forceFunction());return this}on(e,t){return validId(e,ON)&&validHandler(t,ON)&&(this.#formats[e]?this[e]=(...r)=>t(this.#formats[e](...forceArray(r))):this[e]=t),this}}message=(new MessageEvents).format(INFO,(e=>e)).format(ERROR,((e,...t)=>({sender:MESSAGE_EVENTS,method:e,type:ERROR,text:t.join(" ")}))),module.exports=MessageEvents;